
#%%
import numpy as np
import tensorflow as tf

import matplotlib.pyplot as plt

import time
from scipy.io import wavfile

import pyaudio as pa
import wave

##

def evaluate_mean_of_frame(data, **kwargs):

    if "frame_time" in kwargs.keys():
        frame_time = kwargs['frame_time']
    if "shift_time" in kwargs.keys():
        shift_time = kwargs['shift_time']
    if "sample_rate" in kwargs.keys():
        sr = kwargs['sample_rate']
    if "buffer_size" in kwargs.keys():
        buf_size = kwargs['buffer_size']
    if "full_size" in kwargs.keys():
        full_size = kwargs['full_size']
    if "threshold_value" in kwargs.keys():
        trigger_val = kwargs['threshold_value']

    frame_size = int(sr*frame_time)
    shift_size = int(sr*shift_time)

    num_frames = len(data)//(frame_size-shift_size)+1

    mean_val_list = list()

    for i in range(num_frames):
        temp_n = i*(frame_size-shift_size)
        if temp_n+frame_size > len(data):
            one_frame_data = data[temp_n:len(data)]
        else:
            one_frame_data = data[temp_n:temp_n+frame_size]
        mean_val_list.append(np.mean(np.abs(one_frame_data)))

    for i,start in enumerate(mean_val_list):
        if trigger_val < start:
            start_index = i
            break
        else:
            start_index = 0

    for i,end in enumerate(reversed(mean_val_list)):
        if trigger_val < end:
            end_index = len(mean_val_list)-i
            break
        else:
            end_index = len(mean_val_list)

    temp = (frame_size-shift_size)*start_index-buf_size

    if temp <= 0:
        temp = 0

    result = data[temp:(frame_size-shift_size)*end_index+buf_size]

    if full_size > len(result):
        result = fit_determined_size(result, full_size=full_size)
        result = add_noise_data(result, full_size=full_size)
    elif full_size == len(result):
        result = add_noise_data(result, full_size=full_size)
    else:
        result = result[:full_size]
        result = add_noise_data(result, full_size=full_size)

    # return result size of 32000
    return result


##
def fit_determined_size(data, **kwargs):
    if "full_size" in kwargs.keys():
        full_size = kwargs['full_size']

    print(full_size, len(data)) 
    result = np.append(data, np.zeros(full_size-len(data)))
    print(len(result)) 

    return result


##
def add_noise_data(data, **kwargs):
    if "full_size" in kwargs.keys():
        full_size = kwargs['full_size']

    noise_data = np.random.randn(full_size)*0.01
    print(full_size, len(data), len(noise_data))
    result = data+noise_data

    return result



##
def standardization_func(data):
    return (data-np.mean(data))/np.std(data)



chunk = 400
sample_format = pa.paInt16
channels = 1
sr = 16000
frame_t = 0.025
shift_t = 0.01
buffer_s = 3000

seconds = 4

p = pa.PyAudio()

# recording
print('Recording')

stream = p.open(format=sample_format, channels=channels, rate=sr,
                frames_per_buffer=chunk, input=True)

data = list()

frames = list()

print("recording start~!!")

for i in range(0, int(sr / chunk * seconds)):
    if i%(sr/chunk)==0:
        print("{sec}".format(sec=(seconds-(chunk/sr)*i)))
    data = stream.read(chunk)
    data = np.frombuffer(data, 'int16')
    frames.expand(data)
   



frames = standardization_func(frames) 

new_data = evaluate_mean_of_frame(frames, frame_time=frame_t,
                                shift_time=shift_t,
                                sample_rate=sr,
                                buffer_size=buffer_s,
                                full_size = sr*2,
                                threshold_value=0.5)


plt.plot(new_data)
plt.show()







